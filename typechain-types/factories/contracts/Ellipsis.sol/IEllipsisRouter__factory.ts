/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IEllipsisRouter,
  IEllipsisRouterInterface,
} from "../../../contracts/Ellipsis.sol/IEllipsisRouter";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "amounts",
        type: "uint256[2]",
      },
      {
        internalType: "uint256",
        name: "min_mint_amount",
        type: "uint256",
      },
    ],
    name: "add_liquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_token_amount",
        type: "uint256",
      },
      {
        internalType: "int128",
        name: "i",
        type: "int128",
      },
      {
        internalType: "uint256",
        name: "_min_amount",
        type: "uint256",
      },
    ],
    name: "remove_liquidity_one_coin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IEllipsisRouter__factory {
  static readonly abi = _abi;
  static createInterface(): IEllipsisRouterInterface {
    return new utils.Interface(_abi) as IEllipsisRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IEllipsisRouter {
    return new Contract(address, _abi, signerOrProvider) as IEllipsisRouter;
  }
}
