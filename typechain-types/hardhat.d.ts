/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "LinkTokenInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkTokenInterface__factory>;
    getContractFactory(
      name: "VRFConsumerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VRFConsumerBase__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "TransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "AgentManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AgentManager__factory>;
    getContractFactory(
      name: "IProxyAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProxyAdmin__factory>;
    getContractFactory(
      name: "Autofarm",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Autofarm__factory>;
    getContractFactory(
      name: "IUniswapPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapPair__factory>;
    getContractFactory(
      name: "IVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: "ILPToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILPToken__factory>;
    getContractFactory(
      name: "InsurAceAgent",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InsurAceAgent__factory>;
    getContractFactory(
      name: "IRewardController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardController__factory>;
    getContractFactory(
      name: "IStakersPoolV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakersPoolV2__factory>;
    getContractFactory(
      name: "IStakingV2Controller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingV2Controller__factory>;
    getContractFactory(
      name: "IAgent",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAgent__factory>;
    getContractFactory(
      name: "IAgentManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAgentManager__factory>;
    getContractFactory(
      name: "ICALottery",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICALottery__factory>;
    getContractFactory(
      name: "ICALottery",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICALottery__factory>;
    getContractFactory(
      name: "IRandomNumberGenerator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRandomNumberGenerator__factory>;

    getContractAt(
      name: "LinkTokenInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkTokenInterface>;
    getContractAt(
      name: "VRFConsumerBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VRFConsumerBase>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "TransparentUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "AgentManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AgentManager>;
    getContractAt(
      name: "IProxyAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProxyAdmin>;
    getContractAt(
      name: "Autofarm",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Autofarm>;
    getContractAt(
      name: "IUniswapPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapPair>;
    getContractAt(
      name: "IVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVault>;
    getContractAt(
      name: "ILPToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILPToken>;
    getContractAt(
      name: "InsurAceAgent",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InsurAceAgent>;
    getContractAt(
      name: "IRewardController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewardController>;
    getContractAt(
      name: "IStakersPoolV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakersPoolV2>;
    getContractAt(
      name: "IStakingV2Controller",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakingV2Controller>;
    getContractAt(
      name: "IAgent",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAgent>;
    getContractAt(
      name: "IAgentManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAgentManager>;
    getContractAt(
      name: "ICALottery",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICALottery>;
    getContractAt(
      name: "ICALottery",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICALottery>;
    getContractAt(
      name: "IRandomNumberGenerator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRandomNumberGenerator>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
