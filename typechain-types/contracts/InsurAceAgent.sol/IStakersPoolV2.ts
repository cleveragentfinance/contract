/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IStakersPoolV2Interface extends utils.Interface {
  functions: {
    "addStkAmount(address,uint256)": FunctionFragment;
    "claimPayout(address,address,uint256,address,uint256,uint256,uint256)": FunctionFragment;
    "getPoolRewardPerLPToken(address)": FunctionFragment;
    "getRewardPerBlockPerPool(address)": FunctionFragment;
    "getRewardToken()": FunctionFragment;
    "getStakedAmountPT(address)": FunctionFragment;
    "harvestRewards(address,address,address)": FunctionFragment;
    "reCalcPoolPT(address)": FunctionFragment;
    "settlePendingRewards(address,address)": FunctionFragment;
    "showHarvestRewards(address,address)": FunctionFragment;
    "showPendingRewards(address,address)": FunctionFragment;
    "withdrawTokens(address,uint256,address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addStkAmount"
      | "claimPayout"
      | "getPoolRewardPerLPToken"
      | "getRewardPerBlockPerPool"
      | "getRewardToken"
      | "getStakedAmountPT"
      | "harvestRewards"
      | "reCalcPoolPT"
      | "settlePendingRewards"
      | "showHarvestRewards"
      | "showPendingRewards"
      | "withdrawTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addStkAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPayout",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolRewardPerLPToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardPerBlockPerPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedAmountPT",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestRewards",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reCalcPoolPT",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "settlePendingRewards",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "showHarvestRewards",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "showPendingRewards",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addStkAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolRewardPerLPToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardPerBlockPerPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedAmountPT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reCalcPoolPT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlePendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "showHarvestRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "showPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IStakersPoolV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStakersPoolV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addStkAmount(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimPayout(
      _fromToken: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _settleAmtPT: PromiseOrValue<BigNumberish>,
      _claimToSettlementPool: PromiseOrValue<string>,
      _claimId: PromiseOrValue<BigNumberish>,
      _fromRate: PromiseOrValue<BigNumberish>,
      _toRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPoolRewardPerLPToken(
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRewardPerBlockPerPool(
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRewardToken(overrides?: CallOverrides): Promise<[string]>;

    getStakedAmountPT(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    harvestRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reCalcPoolPT(
      _lpToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settlePendingRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    showHarvestRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    showPendingRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawTokens(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _feePool: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addStkAmount(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimPayout(
    _fromToken: PromiseOrValue<string>,
    _paymentToken: PromiseOrValue<string>,
    _settleAmtPT: PromiseOrValue<BigNumberish>,
    _claimToSettlementPool: PromiseOrValue<string>,
    _claimId: PromiseOrValue<BigNumberish>,
    _fromRate: PromiseOrValue<BigNumberish>,
    _toRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPoolRewardPerLPToken(
    _lpToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardPerBlockPerPool(
    _lpToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardToken(overrides?: CallOverrides): Promise<string>;

  getStakedAmountPT(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  harvestRewards(
    _account: PromiseOrValue<string>,
    _lpToken: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reCalcPoolPT(
    _lpToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settlePendingRewards(
    _account: PromiseOrValue<string>,
    _lpToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  showHarvestRewards(
    _account: PromiseOrValue<string>,
    _lpToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  showPendingRewards(
    _account: PromiseOrValue<string>,
    _lpToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawTokens(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    _feePool: PromiseOrValue<string>,
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addStkAmount(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimPayout(
      _fromToken: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _settleAmtPT: PromiseOrValue<BigNumberish>,
      _claimToSettlementPool: PromiseOrValue<string>,
      _claimId: PromiseOrValue<BigNumberish>,
      _fromRate: PromiseOrValue<BigNumberish>,
      _toRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getPoolRewardPerLPToken(
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardPerBlockPerPool(
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardToken(overrides?: CallOverrides): Promise<string>;

    getStakedAmountPT(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reCalcPoolPT(
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    settlePendingRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    showHarvestRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    showPendingRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawTokens(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _feePool: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addStkAmount(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimPayout(
      _fromToken: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _settleAmtPT: PromiseOrValue<BigNumberish>,
      _claimToSettlementPool: PromiseOrValue<string>,
      _claimId: PromiseOrValue<BigNumberish>,
      _fromRate: PromiseOrValue<BigNumberish>,
      _toRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPoolRewardPerLPToken(
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardPerBlockPerPool(
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    getStakedAmountPT(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reCalcPoolPT(
      _lpToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settlePendingRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    showHarvestRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    showPendingRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawTokens(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _feePool: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addStkAmount(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimPayout(
      _fromToken: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _settleAmtPT: PromiseOrValue<BigNumberish>,
      _claimToSettlementPool: PromiseOrValue<string>,
      _claimId: PromiseOrValue<BigNumberish>,
      _fromRate: PromiseOrValue<BigNumberish>,
      _toRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPoolRewardPerLPToken(
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardPerBlockPerPool(
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakedAmountPT(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvestRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reCalcPoolPT(
      _lpToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settlePendingRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    showHarvestRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    showPendingRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawTokens(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _feePool: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
