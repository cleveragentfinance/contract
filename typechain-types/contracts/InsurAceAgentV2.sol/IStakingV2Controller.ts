/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IStakingV2ControllerInterface extends utils.Interface {
  functions: {
    "proposeUnstake(uint256,address)": FunctionFragment;
    "showRewardsFromPools(address[])": FunctionFragment;
    "stakeTokens(uint256,address)": FunctionFragment;
    "stakersPoolV2()": FunctionFragment;
    "unlockRewardsFromPoolsByController(address,address,address[])": FunctionFragment;
    "withdrawTokens(address,uint256,address,uint256,uint8[],bytes32[],bytes32[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "proposeUnstake"
      | "showRewardsFromPools"
      | "stakeTokens"
      | "stakersPoolV2"
      | "unlockRewardsFromPoolsByController"
      | "withdrawTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "proposeUnstake",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "showRewardsFromPools",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeTokens",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakersPoolV2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockRewardsFromPoolsByController",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "proposeUnstake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "showRewardsFromPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakersPoolV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockRewardsFromPoolsByController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IStakingV2Controller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStakingV2ControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    proposeUnstake(
      _amount: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    showRewardsFromPools(
      _tokenList: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakeTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakersPoolV2(overrides?: CallOverrides): Promise<[string]>;

    unlockRewardsFromPoolsByController(
      staker: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenList: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawTokens(
      _staker: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>[],
      r: PromiseOrValue<BytesLike>[],
      s: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  proposeUnstake(
    _amount: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  showRewardsFromPools(
    _tokenList: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakeTokens(
    _amount: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakersPoolV2(overrides?: CallOverrides): Promise<string>;

  unlockRewardsFromPoolsByController(
    staker: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _tokenList: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawTokens(
    _staker: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    _nonce: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>[],
    r: PromiseOrValue<BytesLike>[],
    s: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    proposeUnstake(
      _amount: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    showRewardsFromPools(
      _tokenList: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakersPoolV2(overrides?: CallOverrides): Promise<string>;

    unlockRewardsFromPoolsByController(
      staker: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenList: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawTokens(
      _staker: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>[],
      r: PromiseOrValue<BytesLike>[],
      s: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    proposeUnstake(
      _amount: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    showRewardsFromPools(
      _tokenList: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakersPoolV2(overrides?: CallOverrides): Promise<BigNumber>;

    unlockRewardsFromPoolsByController(
      staker: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenList: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawTokens(
      _staker: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>[],
      r: PromiseOrValue<BytesLike>[],
      s: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    proposeUnstake(
      _amount: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    showRewardsFromPools(
      _tokenList: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakersPoolV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlockRewardsFromPoolsByController(
      staker: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenList: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokens(
      _staker: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>[],
      r: PromiseOrValue<BytesLike>[],
      s: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
